
# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimiter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimiter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
alt - h     : yabai -m window --focus west
alt - l     : yabai -m window --focus east
alt - j     : yabai -m window --focus south
alt - k     : yabai -m window --focus north
alt - left  : yabai -m window --focus west
alt - right : yabai -m window --focus east
alt - down  : yabai -m window --focus south
alt - up    : yabai -m window --focus north

# swap managed window
shift + alt - h     : yabai -m window --swap west
shift + alt - l     : yabai -m window --swap east
shift + alt - j     : yabai -m window --swap south
shift + alt - k     : yabai -m window --swap north
shift + alt - left  : yabai -m window --swap west
shift + alt - right : yabai -m window --swap east
shift + alt - down  : yabai -m window --swap south
shift + alt - up    : yabai -m window --swap north

# resize managed window
ctrl + alt - h     : yabai -m window --resize right:-20:0  2> /dev/null || yabai -m window --resize left:-20:0 2> /dev/null
ctrl + alt - l     : yabai -m window --resize right:20:0   2> /dev/null || yabai -m window --resize left:20:0  2> /dev/null
ctrl + alt - j     : yabai -m window --resize bottom:0:20  2> /dev/null || yabai -m window --resize top:0:20   2> /dev/null
ctrl + alt - k     : yabai -m window --resize bottom:0:-20 2> /dev/null || yabai -m window --resize top:0:-20  2> /dev/null
ctrl + alt - left  : yabai -m window --resize right:-20:0  2> /dev/null || yabai -m window --resize left:-20:0 2> /dev/null
ctrl + alt - right : yabai -m window --resize right:20:0   2> /dev/null || yabai -m window --resize left:20:0  2> /dev/null
ctrl + alt - down  : yabai -m window --resize bottom:0:20  2> /dev/null || yabai -m window --resize top:0:20   2> /dev/null
ctrl + alt - up    : yabai -m window --resize bottom:0:-20 2> /dev/null || yabai -m window --resize top:0:-20  2> /dev/null

# move managed window
# shift + cmd - h : yabai -m window --warp east

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
#alt - 1 : yabai -m space --focus 1
#alt - 2 : yabai -m space --focus 2
#alt - 3 : yabai -m space --focus 3
#alt - 4 : yabai -m space --focus 4
#alt - 5 : yabai -m space --focus 5
#alt - 6 : yabai -m space --focus 6
#alt - z : yabai -m space --focus recent

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
alt + shift - 1 : yabai -m window --space  1 #; osascript -e 'tell application "System Events" to key code 18 using (option down)'
alt + shift - 2 : yabai -m window --space  2 #; osascript -e 'tell application "System Events" to key code 19 using (option down)'
alt + shift - 3 : yabai -m window --space  3 #; osascript -e 'tell application "System Events" to key code 20 using (option down)'
alt + shift - 4 : yabai -m window --space  4 #; osascript -e 'tell application "System Events" to key code 21 using (option down)'
alt + shift - 5 : yabai -m window --space  5 #; osascript -e 'tell application "System Events" to key code 22 using (option down)'
alt + shift - 6 : yabai -m window --space  6 #; osascript -e 'tell application "System Events" to key code 23 using (option down)'
alt + shift - 7 : yabai -m window --space  7 #; osascript -e 'tell application "System Events" to key code 24 using (option down)'
alt + shift - 8 : yabai -m window --space  8 #; osascript -e 'tell application "System Events" to key code 25 using (option down)'
alt + shift - 9 : yabai -m window --space  9 #; osascript -e 'tell application "System Events" to key code 26 using (option down)'
# alt + shift - z : yabai -m window --space  next # ; yabai -m space --focus next

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
alt - a  : yabai -m display --focus 2
alt - s  : yabai -m display --focus 1
alt - d  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
alt + shift - a  : yabai -m window --display 2; yabai -m display --focus 2
alt + shift - s  : yabai -m window --display 1; yabai -m display --focus 1
alt + shift - d  : yabai -m window --display 3; yabai -m display --focus 3

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - f : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2;\
          yabai -m window --toggle topmost

# toggle sticky(+float), topmost, picture-in-picture
# alt + shift - f : yabai -m window --toggle sticky;\
#                   yabai -m window --toggle topmost;\
#                   yabai -m window --toggle pip


# alt - q : yabai --restart-service
alt - r : yabai -m space --rotate 90

alt - 0 : yabai -m space --balance
shift + alt - 0 : yabai -m space --balance


# 0x21 = '[' 0x1E = ']'
alt - 0x21 : yabai -m window --resize right:-60:0 || yabai -m window --resize left:-60:0
alt - 0x1E : yabai -m window --resize right:60:0 || yabai -m window --resize left:60:0
alt + shift - 0x21 : yabai -m window --resize bottom:0:-60
alt + shift - 0x1E : yabai -m window --resize bottom:0:60

# 0x1B = '-' 0x18 = '='
# alt - 0x1B : yabai_resize v -60
# alt - 0x18: yabai_resize v +60
# alt + shift - 0x1B : yabai_resize h -60
#alt + shift - 0x18 : yabai_resize h +60

alt - space : org-capture -ki
alt - c : org-capture -kC
# alt - p : PASSWORD_STORE_ENABLE_EXTENSIONS=true pass choose
alt - m : yabai -m query --windows --window | jq -rc '{app,title,role,subrole}' | tee ~/.log.txt | alerter
