(after! org
  (defadvice! org-babel-record-timestamp (orig-fn &rest args)
      :around 'org-babel-execute-src-block
    (let* ((info (or (nth 1 args) (org-babel-get-src-block-info)))
           (begin-prompt "#+S_TIME: ")
           (end-prompt   "#+E_TIME: ")
           (ts-format   "[%F %T.%6N %z]")
           (code-block-params (or (nth 2 args) (nth 2 info)))
           (code-block-name (nth 4 info))
           (block-start (nth 5 info))
           (timestamp (cdr (assoc :timestamp code-block-params)))
           (cache (let ((c (cdr (assq :cache code-block-params))) )
                    (and (not (car args)) c (string= "yes" c))))
           (new-hash (and cache (org-babel-sha1-hash info)))
           (old-hash (and cache (org-babel-current-result-hash)))
           (current-cache (and new-hash (equal new-hash old-hash))))
      (if (and (equal timestamp "t")
               (not current-cache))
          (let ((begin-time (format-time-string ts-format)))
            (apply orig-fn args)
            (let ((end-time (format-time-string ts-format)))
              (save-excursion
                (goto-char block-start)
                (when (> (length code-block-name) 0)
                  (search-backward code-block-name))
                (forward-line -1)
                (beginning-of-line)
                (if (search-forward end-prompt (line-end-position) t)
                    (progn
                      (beginning-of-line)
                      (kill-line))
                  (progn
                    (end-of-line)
                    (insert "\n")))
                (insert (concat end-prompt end-time))
                (forward-line -1)
                (beginning-of-line)
                (if (search-forward begin-prompt (line-end-position) t)
                    (progn
                      (beginning-of-line)
                      (kill-line))
                  (progn
                    (end-of-line)
                    (insert "\n")))
                (insert (concat begin-prompt begin-time))
                )))
        (apply orig-fn args)))))
