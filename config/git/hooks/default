#!/usr/bin/env bash
set -eo pipefail

exec-message () {
    C='\033[0;32m'
    N='\033[0m' # No Color
    printf "${C}executing:${N} %s\n" "$*" >&2
}

error-message () {
    C='\033[0;31m'
    N='\033[0m' # No Color
    printf "${C}error:${N} %s\n" "$*" >&2
}
hint () {
    C='\033[0;33m'
    N='\033[0m' # No Color
    printf "${C}hint: %s${N}\n" "$*" >&2
}


trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

list_include() {
    IFS=',' read -ra arr <<< "$1"
    for i in "${arr[@]}"; do
        if [[ "$(trim "$i")" == "$(trim "$2")" ]]; then
            return
        fi
    done
    return 1
}

ARGS=("$@")
STDIN=$(cat)

maybe_execute() {
    local HOOK=$1
    if [ "$(echo "$GIT_TRACE_GLOBAL_HOOK" | tr '[:upper:]' '[:lower:]')" == "true" ]; then
        hint "$HOOK ${ARGS[*]}"
    fi

    if [ -d "$HOOK" ]; then
      FAILURE=0
      for child in "$HOOK"/* ; do
        echo -n "$STDIN" | maybe_execute "$child" || FAILURE=1
      done
      exit $FAILURE
    elif [ -f "$HOOK" ]; then
        if [ -x "$HOOK" ]; then
          HOOK_NAME="$(basename "$HOOK")"
          if list_include "$SKIP" "$HOOK_NAME"; then
            hint "'$HOOK' skipped."
          else
            exec-message "$HOOK"
            "$HOOK" "${ARGS[@]}" || ( 
                error-message "$HOOK failed with exit-code $?"; 
                hint "use SKIP='$HOOK_NAME' to skip this hook."; 
                exit 1 )
          fi
        else
            if [ 'false' != "$(git config --default true --get advice.ignoredHook |\
                tr '[:upper:]' '[:lower:]')" ]; then
                hint "The '$HOOK' hook was ignored because it's not set as executable."
                hint "You can disable this warning with \`git config advice.ignoredHook false\`."
            fi
        fi
    fi
}

HOOK_NAME=$(basename "$0")
LOCAL_HOOKS=$(git config --local \
    --default "$(git rev-parse --git-dir)/hooks" \
    --get core.hooksPath)
HOOK=$LOCAL_HOOKS/$HOOK_NAME

echo -n "$STDIN" | maybe_execute "$0.before"
echo -n "$STDIN" | maybe_execute "$HOOK"
echo -n "$STDIN" | maybe_execute "$0.after"
